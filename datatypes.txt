primitives
string number boolen null undefined 

let name = "santhosh"

memory1
{name : "santhosh"}


non-primitives
arrays
objects
function

let array = ["string", 1, null, undefined, true];

memory2
{array : memory3}


memory3
["string", 1, null, undefined, true]


let name1 = ["san"];
let name2 = ["san"];

memory
{name1: FFFFFF, name2: DDDDDD}

memory2
{FFFFFF: "san"}


memory3
{DDDDDD: "san"}

console.log(name1 === name2)

FFFFFF === DDDDDD

let obj = {name : "santhos"}

let arr = [
    {name: "santhohs"},
    {name: "sowumya"},
    {name: "harshit"},
]

arr.map((user)=>console.log(user));




scope, JS execution, 
// console.log(a);
// a = 5;
// var a;

// console.log(a)


// //{a: undefined}


var a; //declaration
a = 5;  // initialization
console.log(a);




1. variable memory allocation
2. actual execution


{a: 5};

5






const user = new Promise((resolve, reject)=>
   {
    if(true){
        resolve({name: "santhosh"});
    }else{
        reject("failure")
    }
   }
);



const response = user.then( data=> {
   const resonpse2 =  new Promise ((resolve, reject)=>resolve({password: "santhosh"}));
   resonpse2.then((data)=>{
    const resonpse3 =  new Promise ((resolve, reject)=>resolve({password: "santhosh"}));
   }).catch();

}
).catch(function(data){
    console.log("printing from catch",data);
})

const data = {
    isError: false,
    isSuccess: false,
    message: "",
    data: null
}

const fetchData = async ()=>{
    try{
        const name = await fetch("https://jsonplaceholder.typicode.com/todos/1",{
            headers: {
                'content-type': ""
            }
        }).then(result=>result.json());
        data.isSuccess = true;
        data.data = name;
        return data;
    }catch(e){
        data.isSuccess = false;
        data.data = null;
        data.isError = true;
        data.message = e.message;
        return data;
    }
}

 async function main(){
    console.log("one");
    const results = await fetchData();
    console.log(results);
    console.log("two");
}

main();

